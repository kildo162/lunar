package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

func main() {
	// Bot token t·ª´ BotFather
	botToken := "7736088830:AAHNO8cfkPcGgJLowfnFfq6laoNIaBehBaY"
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)

	// ID ng∆∞·ªùi nh·∫≠n tin nh·∫Øn (chat_id)
	chatID := "1020039794" // Thay b·∫±ng chat ID c·ªßa b·∫°n

	// N·ªôi dung tin nh·∫Øn
	messageText := "üö® C·∫¢NH B√ÅO: H·ªá th·ªëng g·∫∑p s·ª± c·ªë! Xin vui l√≤ng ch·ªù ƒë·ªôi ng≈© k·ªπ thu·∫≠t x·ª≠ l√Ω."

	// T·∫°o payload ƒë·ªÉ g·ª≠i request
	payload := map[string]string{
		"chat_id": chatID,
		"text":    messageText,
	}
	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		log.Fatalf("Error encoding payload: %v", err)
	}

	// G·ª≠i HTTP POST request
	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(payloadBytes))
	if err != nil {
		log.Fatalf("Error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ Telegram
	if resp.StatusCode == http.StatusOK {
		log.Println("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
	} else {
		log.Printf("L·ªói: %s\n", resp.Status)
	}

	http.HandleFunc("/webhook", func(w http.ResponseWriter, r *http.Request) {
		var update struct {
			Message struct {
				Text string `json:"text"`
				Chat struct {
					ID int64 `json:"id"`
				} `json:"chat"`
			} `json:"message"`
		}

		body, err := ioutil.ReadAll(r.Body)
		if err != nil {
			log.Fatalf("Error reading request body: %v", err)
		}
		err = json.Unmarshal(body, &update)
		if err != nil {
			log.Fatalf("Error decoding JSON: %v", err)
		}

		if update.Message.Text == "/hello" {
			replyMessage(apiURL, update.Message.Chat.ID, "Xin ch√†o, b·∫°n c·∫ßn gi√∫p g√¨?")
		}
	})

	log.Fatal(http.ListenAndServe(":8080", nil))
}

func replyMessage(apiURL string, chatID int64, messageText string) {
	payload := map[string]interface{}{
		"chat_id": chatID,
		"text":    messageText,
	}
	payloadBytes, err := json.Marshal(payload)
	if err != nil {
		log.Fatalf("Error encoding payload: %v", err)
	}

	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(payloadBytes))
	if err != nil {
		log.Fatalf("Error sending request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Printf("L·ªói: %s\n", resp.Status)
	}
}
